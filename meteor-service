#!/bin/bash
readonly service_cfg=${0%/scripts*}/etc/service.cfg

. ${service_cfg} 

readonly module="meteor"
readonly log_file=${log_dir}/${module}.log
readonly log_facility="${service}-${module}"
readonly pidfile=${run_dir}/${module}.pid
export PATH=${usr_prefix}/node/bin:${PATH}
readonly meteor_config="${etc_dir}/config.json"

. ${scripts_base}/common

# !!!! make explicit mongodb dependency (first thing meteor does is try to connect to the DB...)
meteor_start(){
    log "${info} Starting ${module}"

    [ -z "${meteor_app_dir}" ] && log "${critical} Define meteor_app_dir in service.cfg" && exit 7
    [ -z "${ROOT_URL}" ]  && log "${critical} Define ROOT_URL in service.cfg" && exit 7
    [ -z "${meteor_dbname}" ]  && log "${critical} Define meteor_dbname in service.cfg" && exit 7
    [ -z "${meteor_user}" ]  && log "${critical} Define meteor_user in service.cfg" && exit 7   
    [ ! -f ${meteor_config} ] && log "${warning} Missing ${meteor_config}"

    if [ -z "$(which node)" ]; then
	log "${info} Installing node"
	${scripts_base}/build/node
    fi

    if [ -z "$(which forever)" ]; then
	log "${info} Installing forever.js"
	npm install forever -g | logalize ${log_file} > /dev/null
	if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log "${critical} Problem with forever.js install"
            exit 6
	fi
    fi
    
    
    [ ! -f ${pidfile} ] && touch ${pidfile}
    chown ${meteor_user} ${pidfile}
    [ ! -f ${log_file} ] && touch ${log_file}
    chown ${meteor_user} ${log_file}


    cd ${meteor_app_dir}
    # for development mode: enough to run meteor directly
    # meteor run --settings ${meteor_config}

    # production
    cd programs/server
    npm install --production | logalize ${log_file} > /dev/null
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        log "${critical} Problem with npm install"
        exit 6
    fi
      
    cd ${meteor_app_dir}
    # Mongo environment
    # 'mongodb://user:password@host:port/databasename'
    [ -z "${mongo_host}" ] && readonly mongo_host=localhost
    [ -z "${mongo_port}" ] && readonly mongo_port=27017
    export MONGO_URL="mongodb://${mongo_host}:${mongo_port}/${meteor_dbname}"
    export PORT=${meteor_port:-3000}
    # ROOT_URL must be defined in service.cfg - here be just export it
    export ROOT_URL
    # export MAIL_URL='smtp://user:password@mailhost:port/'
    # Other ways of passing settings:
    # https://stackoverflow.com/questions/34761577/how-to-config-meteor-on-aws-ebs-using-meteor-settings-environment-variable/34774239#34774239
    # we need to preserve cwd and PATH for forever command...
    readonly ms="$(cat ${meteor_config})"
    su ${meteor_user} -s /bin/bash -c "PATH=${PATH} METEOR_SETTINGS='${ms}' forever start --pidFile ${pidfile} -a -l ${log_file} -o ${log_file} -e ${log_file} --minUptime 10000  main.js"

    # We wait 10 seconds (--minUptime) to be sure main.js is working
    sleep 10
    meteor_status
    if [ ${$?} -eq 0 ]; then
	log "${success} ${module} started"
    else
	log "${critical} Problem starting ${module}"
	exit 2
    fi                
}

meteor_stop(){
    log "${info} Stopping ${module}..."
    if [ -z "$(which forever)" ]; then
	log "${info} Installing forever.js"
	npm install forever -g | logalize ${log_file} > /dev/null
	if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log "${critical} Problem with forever.js install"
            exit 6
	fi
    fi
    cd ${meteor_app_dir}
    su ${meteor_user} -s /bin/bash -c "PATH=${PATH} forever stop -l ${log_file} main.js"
    log "${success} Stopped"
}

meteor_status(){
    if [ -z "$(which forever)" ]; then
	log "${info} Installing forever.js"
	npm install forever -g | logalize ${log_file} > /dev/null
	if [ ${PIPESTATUS[0]} -ne 0 ]; then
            log "${critical} Problem with forever.js install"
            exit 6
	fi
    fi

    su ${meteor_user} -s /bin/bash -c "PATH=${PATH} forever list" | tail -1 | grep -v STOPPED > /dev/null
    return $?
}

case "$1" in
    "start")
	meteor_start
	;;
    "stop")
	meteor_stop
	;;
    "restart")
	meteor_stop
	meteor_start
	;;
    "status")
	meteor_status
	exit $?
	;;
    *)
	echo "Syntax: $0 [start|stop|restart]"
esac

exit 0
