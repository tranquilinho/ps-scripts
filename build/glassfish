#!/bin/bash

readonly service_cfg=${0%/scripts*}/etc/service.cfg

. ${service_cfg} && . ${scripts_base}/common

print_usage(){
    echo "$0 [ -s [skip_install|skip_configure]] -V glassfish_version -h]"
    exit 2
}


while getopts "s:V:h" options; do
    case "${options}" in
        s)
            case ${OPTARG} in
		install)
		    readonly skip_install=0
		    ;;
		configure)
		    readonly skip_configure=0
		    ;;
		*)
		    echo "Unknow step"
		    ;;
	    esac
            ;;
	V)
	    readonly pkg_version=${OPTARG}
	    ;;
        h)
            print_usage
            ;;
        *)
            print_usage
            ;;
    esac
done


[ -z "${pkg_version}" ] && readonly pkg_version=4.0

readonly pkg_name=glassfish
readonly pkg=glassfish-${pkg_version}-unix.sh
readonly url_base=http://download.java.net/glassfish/${pkg_version}/release/
if [ ${pkg_version} == "4.0" ]; then
    readonly glassfish_dir=glassfish4
elif [ ${pkg_version} == "3.1.2.2" ]; then 
    readonly glassfish_dir=glassfish3
else
    echo "Unknown version"
    exit 2
fi

install_prereq jdk "mandatory"

log "${info} Custom install start ${pkg_name} ${pkg_version}"


if [ ${skip_install:-1} -ne 0 ]; then
    build_preconditions
    if [ -s ${usr_prefix}/glassfish ]; then
	rm ${usr_prefix}/glassfish
    fi

    [ -z "${gfanswers_file}" ] && readonly gfanswers_file=${etc_dir}/glassfish.cfg

    # The original answers file is created with the -n option of glassfish installer
    ${scripts_base}/config/mkglassfish_cfg ${pkg_version} > ${gfanswers_file} 
    [ $? -ne 0 ] && log "${critical} Problem creating glassfish answers file" && exit 3

    bash ${pkg} -a ${gfanswers_file} -s 2>&1 | logalize ${build_log}
    
    if [ $? -ne 0 ]; then
	log "${critical} Problem installing ${pkg_name}"
	exit 8
    fi

    readonly glassfish_logs=${log_dir}/glassfish
    [ ! -s ${glassfish_logs} ] && ln -s ${usr_prefix}/${glassfish_dir}/glassfish/domains/domain1/logs ${glassfish_logs}

    ln -s ${usr_prefix}/${glassfish_dir} ${usr_prefix}/glassfish

fi

readonly asadmin=${prefix}/bin/asadmin

if [ ${skip_configure:-1} -ne 0 -a -x ${asadmin} ]; then
    ${asadmin} --port ${gfadmin_port} --passwordfile ${gfadmin_password_file} start-domain domain1 | logalize ${build_log}

    ${asadmin} --port ${gfadmin_port} --passwordfile ${gfadmin_password_file} enable-secure-admin | logalize ${build_log}

    ${asadmin} --port ${gfadmin_port} --passwordfile ${gfadmin_password_file} create-file-user --groups deployer --authrealmname admin-realm deployer | logalize ${build_log}

    ${asadmin} --port ${gfadmin_port} --passwordfile ${gfadmin_password_file} restart-domain domain1 | logalize ${build_log}
fi


log "${success} Custom install finish ${pkg_name}  ${pkg_version}"
