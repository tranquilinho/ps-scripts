#!/bin/bash

readonly service_root=${0%/scripts*}
readonly service_cfg=${service_root}/etc/service.cfg

. ${service_cfg}

readonly docker_cfg=${etc_dir}/docker.cfg

if [ ! -f ${docker_cfg} ];then
    echo "Docker config ${docker_cfg} not found"
    exit 3
fi

. ${docker_cfg}

[ -z "${docker_run}" ] && readonly docker_run=${service_root}/data/run/docker
readonly hash_file=${docker_run}/${container}
readonly log_file=${service_root}/log/service.log
readonly log_facility="${service}"

. ${scripts_base}/common

readonly docker_stderr=$(mktemp)
docker=$(which docker)
[ -z "${docker}" ] && docker=$(which docker.io)

container_start(){
    # log "${info} docker run ${docker_mounts} ${docker_ports} --name ${container} -d -t ${image} ${container_init} 2> ${docker_stderr}"
    # !!!! log docker log ;-)
    hash=$(${docker} run ${docker_mounts} ${docker_ports} --name ${container} -d -t ${image} ${container_init} 2> ${docker_stderr})
}

case "$1" in
    "start")
	log "${info} Docker container start"
	if [ ! -d ${docker_run} ]; then
	    mkdir -p ${docker_run}
	fi

	# If the service has the same "service root" inside and outside, we can
	# initialize this variable for him
	[ -z "${container_init_outside}" ] && container_init_outside=${container_init}

	if [ ! -x ${container_init_outside} ];then
	    echo "${container_init} must have executable permission"
	    exit 3
	fi

	container_start
	egrep "Abort due to constraint violation: UNIQUE| is already assigned" ${docker_stderr} >/dev/null
	if [ $? -eq 0 ]; then
	    # maybe the container was not stopped properly... remove previous instance
	    log "${critical} Container name not unique - removing previous instance"
	    readonly previous_hash=$( ${docker} ps -a | grep ${container} | cut -c1-12)
	    ${docker} rm ${previous_hash}
	    container_start
	fi
	if [ -n "${hash}" ]; then
	    echo ${hash} > ${hash_file}
	    log "${success} Container ${container} (${hash}) started"
	else
	    log "${critical} Problem starting ${container}"
	    exit 2
	fi
	;;
    "stop")
	hash=$(cat ${hash_file})
	if [ -n "${hash}" ]; then
	    log "${info} Stopping ${hash}..."
	    log "${info} Stopping service..."
	    watchdog 5 ssh -p ${ssh_port} localhost "${etc_dir}/service-manager stop" 
	    ${docker} stop -t=15 ${hash}
	    ${docker} rm ${hash}
	    log "${success} Stopped"
	else
	    log "${critical} hashfile ${hash_file} not found"
	    exit 2
		fi
	;;
    *)
	echo "Syntax: $0 [start|stop]"
esac

rm ${docker_stderr}

exit 0
